#include "test_common.h"

#include <cstring>

#include "../internal/inflate/Inflate.h"

static const unsigned char uncompressed_deflate_block[603] = {
    0x78, 0x01, 0x01, 0x50, 0x02, 0xAF, 0xFD, 0x03, 0x02, 0x23, 0x07, 0x00, 0x04, 0x01, 0x00, 0x0B, 0x00, 0x08, 0x00,
    0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x7F, 0x11, 0x00, 0x00, 0x0A, 0x00, 0x06,
    0x00, 0x53, 0x50, 0x56, 0x5F, 0x4B, 0x48, 0x52, 0x5F, 0x72, 0x61, 0x79, 0x5F, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6E,
    0x67, 0x00, 0x0B, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4C, 0x53, 0x4C, 0x2E, 0x73, 0x74, 0x64, 0x2E,
    0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x0F, 0x00, 0x06, 0x00, 0xC5, 0x14, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6D, 0x61, 0x69, 0x6E, 0x00, 0x00, 0x00,
    0x00, 0x0A, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0xCC, 0x01, 0x00, 0x00, 0x04, 0x00,
    0x06, 0x00, 0x47, 0x4C, 0x5F, 0x45, 0x58, 0x54, 0x5F, 0x72, 0x61, 0x79, 0x5F, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6E,
    0x67, 0x00, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x47, 0x4C, 0x5F, 0x47, 0x4F, 0x4F, 0x47, 0x4C, 0x45, 0x5F, 0x63, 0x70,
    0x70, 0x5F, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x5F, 0x6C, 0x69, 0x6E, 0x65, 0x5F, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
    0x69, 0x76, 0x65, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x47, 0x4C, 0x5F, 0x47, 0x4F, 0x4F, 0x47, 0x4C, 0x45, 0x5F,
    0x69, 0x6E, 0x63, 0x6C, 0x75, 0x64, 0x65, 0x5F, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x00, 0x05,
    0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6D, 0x61, 0x69, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x68, 0x69, 0x74, 0x5F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x74, 0x00, 0x00, 0x06, 0x00, 0x06,
    0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x62, 0x6A, 0x5F, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x00,
    0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x70, 0x72, 0x69, 0x6D, 0x5F,
    0x69, 0x6E, 0x64, 0x65, 0x78, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x74, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00,
    0x00, 0x06, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x05, 0x00,
    0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x67, 0x5F, 0x70, 0x6C, 0x64, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02,
    0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00,
    0x00, 0x20, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00,
    0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x09,
    0x00, 0x00, 0x00, 0xDE, 0x14, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3B, 0x00, 0x04, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x0A, 0x00, 0x00, 0x00, 0xDE, 0x14, 0x00, 0x00, 0x2B, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0xBF, 0x20, 0x00, 0x04, 0x00, 0x0D, 0x00, 0x00, 0x00, 0xDE, 0x14, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x36,
    0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0xF8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00,
    0x00, 0x0A, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x03, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x0C, 0x00,
    0x00, 0x00, 0xFD, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x5E, 0x47, 0x48, 0x9D};

static const unsigned char fixed_deflate_block[381] = {
    0x78, 0x01, 0x63, 0x66, 0x52, 0x66, 0x67, 0x60, 0x61, 0x64, 0xE0, 0x66, 0xE0, 0x60, 0xE0, 0x67, 0x80, 0x00, 0x41,
    0x06, 0x26, 0x86, 0x7A, 0x41, 0x06, 0x06, 0x2E, 0x06, 0x36, 0x86, 0xE0, 0x80, 0xB0, 0x78, 0x6F, 0x8F, 0xA0, 0xF8,
    0xA2, 0xC4, 0xCA, 0xF8, 0x92, 0xA2, 0xC4, 0xE4, 0xCC, 0xBC, 0x74, 0xA0, 0x5A, 0x36, 0x06, 0x46, 0xA0, 0x52, 0x77,
    0x9F, 0x60, 0x1F, 0xBD, 0xE2, 0x92, 0x14, 0x3D, 0x13, 0x53, 0x03, 0x90, 0x4E, 0x3E, 0x06, 0x66, 0xB0, 0x01, 0x20,
    0x39, 0x7E, 0xA0, 0x9A, 0xA3, 0x22, 0x0C, 0x0C, 0x2C, 0x40, 0x76, 0x6E, 0x62, 0x66, 0x1E, 0x48, 0x82, 0x0B, 0x88,
    0x99, 0x81, 0x90, 0x09, 0x48, 0x9F, 0x01, 0x2A, 0x62, 0x01, 0xAA, 0x71, 0xF7, 0x89, 0x77, 0x8D, 0x08, 0x41, 0x31,
    0x1E, 0x28, 0xCE, 0x05, 0x12, 0x77, 0xF7, 0xF7, 0x77, 0xF7, 0x71, 0x8D, 0x4F, 0x2E, 0x28, 0x88, 0x2F, 0x2E, 0xA9,
    0xCC, 0x49, 0x8D, 0xCF, 0xC9, 0xCC, 0x4B, 0x8D, 0x4F, 0xC9, 0x2C, 0x4A, 0x4D, 0x2E, 0xC9, 0x2C, 0x4B, 0x05, 0xE9,
    0xE7, 0x40, 0x52, 0x97, 0x99, 0x97, 0x9C, 0x53, 0x9A, 0x82, 0xAC, 0x80, 0x15, 0xA8, 0x02, 0xD9, 0x7E, 0x56, 0x06,
    0x56, 0xA0, 0x0E, 0x06, 0x86, 0x8C, 0xCC, 0x92, 0xF8, 0x94, 0xC4, 0x92, 0xC4, 0xF8, 0x12, 0x06, 0xA0, 0x0B, 0xD8,
    0xC0, 0x62, 0x40, 0x61, 0x86, 0xFC, 0xA4, 0xAC, 0xF8, 0xCC, 0xBC, 0x94, 0xD4, 0x0A, 0x20, 0x1B, 0x26, 0x0E, 0xF2,
    0x4B, 0x41, 0x51, 0x66, 0x2E, 0x4C, 0x82, 0x0D, 0x6C, 0x2B, 0x03, 0xD8, 0x0F, 0x40, 0xED, 0x40, 0x75, 0x20, 0x57,
    0x80, 0xFC, 0xC5, 0xC0, 0x50, 0x8A, 0xC4, 0x07, 0xD9, 0x5B, 0x06, 0xC4, 0x20, 0x37, 0x80, 0xFC, 0x9D, 0x1E, 0x5F,
    0x90, 0x93, 0x02, 0xA4, 0x85, 0x81, 0x3A, 0x41, 0xFE, 0x57, 0x04, 0x87, 0x04, 0xC4, 0x1C, 0x51, 0xA0, 0x1A, 0x36,
    0xA0, 0x98, 0x02, 0x10, 0x83, 0xEC, 0x13, 0x03, 0xCA, 0xB1, 0x43, 0xF9, 0x72, 0x40, 0x16, 0xC8, 0x7C, 0x90, 0x3C,
    0x08, 0x83, 0xC4, 0x61, 0x58, 0x01, 0xA8, 0x8F, 0x13, 0xC8, 0xBF, 0x07, 0x0C, 0x67, 0x90, 0x1A, 0x6B, 0x28, 0x1F,
    0x64, 0x1F, 0x48, 0x4C, 0x1B, 0x6A, 0x2E, 0x37, 0x90, 0x0F, 0x72, 0x0F, 0x88, 0x0F, 0xD2, 0xCB, 0x03, 0xC4, 0x0C,
    0x0C, 0x0D, 0xFB, 0x41, 0xFA, 0x79, 0x81, 0x2C, 0x90, 0x5A, 0x90, 0xB8, 0x19, 0xD0, 0xB5, 0x20, 0xB7, 0x81, 0xD4,
    0x82, 0x00, 0xC8, 0x4F, 0x3F, 0x80, 0x22, 0xAC, 0x40, 0xDA, 0x11, 0x48, 0x82, 0xD4, 0xF2, 0x01, 0x31, 0xC8, 0x7C,
    0x90, 0x99, 0x76, 0x40, 0x15, 0x20, 0x3E, 0xC8, 0xBC, 0xBF, 0x40, 0x97, 0x5B, 0x00, 0x31, 0x00, 0x5E, 0x47, 0x48,
    0x9D};

static const unsigned char dynamic_deflate_block[341] = {
    0x78, 0xDA, 0x55, 0x51, 0x4D, 0x4B, 0xC3, 0x40, 0x10, 0x9D, 0xA4, 0x6D, 0x12, 0x53, 0xDB, 0x52, 0xFC, 0x38, 0x4A,
    0xC5, 0xA3, 0x50, 0x3C, 0xA8, 0x14, 0x04, 0xC1, 0x43, 0xA9, 0x60, 0xA0, 0x62, 0x45, 0xBC, 0x2D, 0x31, 0x09, 0x75,
    0x25, 0x8D, 0x21, 0xDD, 0x16, 0x7B, 0xD2, 0x7F, 0xE6, 0xC9, 0x9B, 0xBF, 0xC1, 0xDF, 0xE1, 0x45, 0xF0, 0xCD, 0x66,
    0xA5, 0x71, 0x97, 0xC9, 0xEC, 0xBC, 0x79, 0xF3, 0x66, 0x67, 0x53, 0xB3, 0x0F, 0x5C, 0xAA, 0x5B, 0xD4, 0x24, 0x8F,
    0x3A, 0x54, 0xAE, 0x2E, 0xD9, 0xF4, 0xDA, 0x25, 0xF2, 0xC9, 0xA1, 0xC9, 0xF5, 0x9D, 0xB8, 0xBA, 0xBC, 0x11, 0x45,
    0xB8, 0x12, 0xAA, 0x08, 0x23, 0x99, 0x4D, 0xC1, 0x75, 0xC8, 0x02, 0x6F, 0x14, 0x4C, 0x82, 0xFE, 0x5C, 0xC5, 0xFD,
    0xE3, 0x93, 0x23, 0xAE, 0x6B, 0x53, 0x4D, 0xD7, 0x73, 0xAE, 0x03, 0xCE, 0xC7, 0x36, 0x51, 0x1D, 0xE7, 0x59, 0x28,
    0x33, 0xC6, 0x7D, 0x58, 0x0D, 0xDB, 0x86, 0xFF, 0xB4, 0x38, 0xE7, 0x40, 0x43, 0x0C, 0xEF, 0x6F, 0xFF, 0xC9, 0x03,
    0xF7, 0x19, 0x1F, 0x8D, 0xC7, 0xA3, 0x60, 0x28, 0xA2, 0x3C, 0x17, 0x73, 0xB5, 0x4A, 0x13, 0x91, 0xCA, 0x2C, 0x11,
    0xB1, 0x2C, 0x92, 0x48, 0xC9, 0x65, 0xC2, 0x3C, 0xAF, 0xC2, 0x93, 0x59, 0x94, 0x2E, 0xE2, 0x2A, 0xA1, 0x01, 0x46,
    0xB5, 0x7F, 0x03, 0xDB, 0x83, 0x7F, 0x94, 0x4A, 0xC4, 0xA1, 0x0A, 0x85, 0x22, 0xDC, 0xC0, 0xD1, 0x18, 0xAF, 0xE7,
    0x87, 0x27, 0xA8, 0xC4, 0xC9, 0x0B, 0xAD, 0x71, 0x9E, 0x25, 0x2F, 0xE4, 0xEC, 0x2F, 0xE1, 0xE8, 0xAE, 0xA4, 0x67,
    0x50, 0xB4, 0x8E, 0x79, 0xF2, 0x45, 0x25, 0xE6, 0xBE, 0x4B, 0xDD, 0xB3, 0xAE, 0xE7, 0x9E, 0x8A, 0x3C, 0x8D, 0xE1,
    0xB7, 0x50, 0xC9, 0xB5, 0xFB, 0xFA, 0x25, 0x4A, 0x9D, 0x1D, 0xFD, 0x12, 0x44, 0x3D, 0xD3, 0x6F, 0x17, 0x19, 0xD7,
    0xC4, 0x7B, 0x38, 0x79, 0x5A, 0xB7, 0x34, 0xB7, 0x62, 0x3D, 0xD4, 0x6D, 0xC0, 0x7F, 0xE1, 0x9D, 0x99, 0x73, 0x66,
    0x62, 0xDF, 0x60, 0x87, 0x46, 0xB7, 0x69, 0xEE, 0xC3, 0x31, 0xD7, 0x6D, 0xEA, 0x69, 0xDF, 0xDE, 0xB9, 0xBE, 0x65,
    0xB8, 0x8C, 0x9F, 0xE2, 0xB6, 0xB6, 0xE1, 0x92, 0x99, 0xE9, 0x1B, 0x48, 0x03, 0xFE, 0x02, 0xDF, 0x96, 0xFE, 0xC7,
    0xA5, 0x3E, 0x6B, 0x9E, 0x83, 0xD1, 0x36, 0x7A, 0x3F, 0xB8, 0xF9, 0x00, 0xF6, 0x0B, 0x5E, 0x47, 0x48, 0x9D};

static const unsigned char uncompressed_data[592] = {
    0x03, 0x02, 0x23, 0x07, 0x00, 0x04, 0x01, 0x00, 0x0B, 0x00, 0x08, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x11, 0x00, 0x02, 0x00, 0x7F, 0x11, 0x00, 0x00, 0x0A, 0x00, 0x06, 0x00, 0x53, 0x50, 0x56, 0x5F, 0x4B, 0x48,
    0x52, 0x5F, 0x72, 0x61, 0x79, 0x5F, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6E, 0x67, 0x00, 0x0B, 0x00, 0x06, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x47, 0x4C, 0x53, 0x4C, 0x2E, 0x73, 0x74, 0x64, 0x2E, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00,
    0x0E, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x06, 0x00, 0xC5, 0x14, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x6D, 0x61, 0x69, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x03, 0x00,
    0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0xCC, 0x01, 0x00, 0x00, 0x04, 0x00, 0x06, 0x00, 0x47, 0x4C, 0x5F, 0x45, 0x58,
    0x54, 0x5F, 0x72, 0x61, 0x79, 0x5F, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6E, 0x67, 0x00, 0x00, 0x04, 0x00, 0x0A, 0x00,
    0x47, 0x4C, 0x5F, 0x47, 0x4F, 0x4F, 0x47, 0x4C, 0x45, 0x5F, 0x63, 0x70, 0x70, 0x5F, 0x73, 0x74, 0x79, 0x6C, 0x65,
    0x5F, 0x6C, 0x69, 0x6E, 0x65, 0x5F, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x00, 0x00, 0x04, 0x00,
    0x08, 0x00, 0x47, 0x4C, 0x5F, 0x47, 0x4F, 0x4F, 0x47, 0x4C, 0x45, 0x5F, 0x69, 0x6E, 0x63, 0x6C, 0x75, 0x64, 0x65,
    0x5F, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x6D, 0x61, 0x69, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x08, 0x00, 0x00, 0x00, 0x68, 0x69, 0x74,
    0x5F, 0x64, 0x61, 0x74, 0x61, 0x5F, 0x74, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x6F, 0x62, 0x6A, 0x5F, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x08,
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x70, 0x72, 0x69, 0x6D, 0x5F, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x00, 0x00,
    0x06, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04,
    0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x08, 0x00,
    0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x67,
    0x5F, 0x70, 0x6C, 0x64, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x1E, 0x00,
    0x07, 0x00, 0x08, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07,
    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x09, 0x00, 0x00, 0x00, 0xDE, 0x14, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x3B, 0x00, 0x04, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xDE, 0x14, 0x00,
    0x00, 0x2B, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2B, 0x00,
    0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF, 0x20, 0x00, 0x04, 0x00, 0x0D,
    0x00, 0x00, 0x00, 0xDE, 0x14, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00,
    0x00, 0x41, 0x00, 0x05, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0B, 0x00,
    0x00, 0x00, 0x3E, 0x00, 0x03, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0xFD, 0x00, 0x01, 0x00, 0x38,
    0x00, 0x01, 0x00};

void test_inflate() {
    using namespace Ray;

    printf("Test inflate            | ");

    { // uncompressed deflate block
        Inflater inflater;
        inflater.Feed(uncompressed_deflate_block);

        std::vector<uint8_t> decompressed_data(256 * 1024);
        const int decompressed_size = inflater.Inflate(decompressed_data);
        require(decompressed_size == sizeof(uncompressed_data));
        decompressed_data.resize(decompressed_size);
        require(memcmp(decompressed_data.data(), uncompressed_data, sizeof(uncompressed_data)) == 0);
    }
    { // fixed Huffman block
        Inflater inflater;
        inflater.Feed(fixed_deflate_block);

        std::vector<uint8_t> decompressed_data(256 * 1024);
        const int decompressed_size = inflater.Inflate(decompressed_data);
        require(decompressed_size == sizeof(uncompressed_data));
        decompressed_data.resize(decompressed_size);
        require(memcmp(decompressed_data.data(), uncompressed_data, sizeof(uncompressed_data)) == 0);
    }
    { // dynamic Huffman block
        Inflater inflater;
        inflater.Feed(dynamic_deflate_block);

        std::vector<uint8_t> decompressed_data(256 * 1024);
        const int decompressed_size = inflater.Inflate(decompressed_data);
        require(decompressed_size == sizeof(uncompressed_data));
        decompressed_data.resize(decompressed_size);
        require(memcmp(decompressed_data.data(), uncompressed_data, sizeof(uncompressed_data)) == 0);
    }

    printf("OK\n");
}